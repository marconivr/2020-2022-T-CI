
# Test all for Castellani Davide
name: Test all for Castellani Davide

on: [push, pull_request]

jobs:
  agent:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd agent
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements/requirements.txt
    - name: Lint with flake8
      run: |
        cd agent
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd agent
        pytest

  eventsview:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd eventsview
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements/requirements.txt
    - name: Lint with flake8
      run: |
        cd eventsview
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd eventsview
        pytest
        
  ldisk:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd ldisk
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements/requirements.txt
    - name: Lint with flake8
      run: |
        cd ldisk
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd ldisk
        cd bin
        pytest
        
  macaddresssep:

    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [ubuntu-20.04, ubuntu-latest, ubuntu-18.04, ubuntu-16.04]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd macaddresssep
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/requirements.txt
    - name: Test with pytest
      run: |
        cd macaddresssep
        cd bin
        pytest
        
  maccharger:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd maccharger
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements/requirements.txt
    - name: Lint with flake8
      run: |
        cd maccharger
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd maccharger
        pytest
      
  netchange:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd netchange
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements/requirements.txt ]; then pip install -r requirements/requirements.txt; fi
    - name: Lint with flake8
      run: |
        cd netchange
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd netchange
        pytest
        
  product:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        cd product
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements/requirements.txt
    - name: Lint with flake8
      run: |
        cd product
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd product
        cd bin
        pytest
        
  # Sync Agentless 
  sync-agentless:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]

    # Create the DB
    services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: yes
                    MYSQL_DATABASE: sync
                    MYSQL_ROOT_PASSWORD: syncpws
                ports:
                    - 3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2
    - name: Install Database dependencies and test it
      run : |
        sudo apt-get install mysql-client -y
        mysql -uroot -psyncpws -h0.0.0.0 -P32768 -e "SHOW DATABASES;" # Check
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install py3 dependencies
      run: |
        cd sync
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/requirements.txt
    - name: Test with pytest
      run: |
        cd sync
        pytest
    - name: Log(s)
      run: |
        cd sync
        cat ./log/*
    - name: Print DB(s)
      run: |
        mysql -uroot -psyncpws -h0.0.0.0 -P32768 -e "SHOW TABLES FROM sync;" # Check
        mysql -uroot -psyncpws -h0.0.0.0 -P32768 -e "SELECT * FROM sync.PCname_testfile;" # Show my test table content

  # Sync Agent part 1
  sync-agent-1:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install py3 dependencies
      run: |
        cd sync
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/requirements.txt
    - name: Test with pytest
      run: |
        cd sync
        sed -i 's/False/True/g' ./bin/test_sync.py # Change test file to make it agent
        pytest
    - name: Log(s)
      run: |
        cd sync
        cat ./log/*
    - name: View file structure
      run: |
        cd sync
        sudo apt install tree
        tree
    - name: Upload file(s)
      run: |
        cat ./sync/flussi/cloned/PCname_testfile.csv > PCname_testfile.csv
    - uses: actions/upload-artifact@v2
      with:
        path: PCname_testfile.csv

  # Sync Agent part 2 
  sync-agent-2:
    needs: sync-agent-1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]

    # Create the DB
    services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: yes
                    MYSQL_DATABASE: sync
                    MYSQL_ROOT_PASSWORD: syncpws
                ports:
                    - 3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
    - name: Install Database dependencies and test it
      run : |
        sudo apt-get install mysql-client -y
        mysql -uroot -psyncpws -h0.0.0.0 -P32768 -e "SHOW DATABASES;" # Check
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install py3 dependencies
      run: |
        cd sync
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/requirements.txt
    - name: View file structure
      run: |
        cd sync
        sudo apt install tree
        tree
    - name: Download file(s)
      run: |
         rm ./sync/flussi/testfile.csv
         cp artifact/PCname_testfile.csv ./sync/flussi/cloned/PCname_testfile.csv
    - name: View file structure 2
      run: |
        cd sync
        tree
        cat ./flussi/cloned/PCname_testfile.csv
    - name: Test with pytest
      run: |
        cd sync
        sed -i 's/False/True/g' ./bin/test_sync.py # Change test file to make it agent
        sed -i 's/not/ /g' ./bin/test_sync.py # Change test file to make it agent
        pytest
    - name: Log(s)
      run: |
        cd sync
        cat ./log/*
    - name: Print DB(s)
      run: |
        mysql -uroot -psyncpws -h0.0.0.0 -P32768 -e "SHOW TABLES FROM sync;" # Check
        mysql -uroot -psyncpws -h0.0.0.0 -P32768 -e "SELECT * FROM sync.PCname_testfile;" # Show my test table content
